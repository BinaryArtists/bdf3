<?xml version="1.0" encoding="UTF-8"?>
<ViewConfig>
  <Arguments/>
  <Context/>
  <Model/>
  <View>
    <ClientEvent name="onReady" signature="self,arg,Chat">Chat.set({
	width: &quot;100%&quot;,
	height: &quot;100%&quot;
}).show();

Chat.addChatCloseListener(function() {
	
});
</ClientEvent>
    <Property name="packages">font-awesome,colors</Property>
    <Dialog id="Chat">
      <ClientEvent name="onCreateDom" signature="self,arg,dsUser,activeGroupList,userResult">var dom = $(arg.dom).find(&quot;.d-caption-bar.d-dialog-caption-bar&quot;)[0];
var userSearch = new dorado.widget.TextEditor({
	exClassName: &quot;user-search-txt&quot;
});
userSearch.render(dom);
$(dom).find(&quot;input&quot;).on(&quot;keydown&quot;, function(e) {
	var inputDom = this;
	if (e.keyCode === 13) {
		return;
	}
	window.clearTimeout(self.userQueryTask);
	self.userQueryTask = window.setTimeout(function(){
		var key = $(inputDom).val();
		if (key) {
			activeGroupList.set(&quot;visible&quot;, false);
			userResult.set(&quot;visible&quot;, true);
			dsUser.set(&quot;parameter&quot;, key).flushAsync();
		}
		else {
			activeGroupList.set(&quot;visible&quot;, true);
			userResult.set(&quot;visible&quot;, false);
		}
	}, 150);
});

var chatOption = new dorado.widget.Control({
	exClassName: &quot;chat-option&quot;
});
chatOption.render(dom);



</ClientEvent>
      <ClientEvent name="onCreate" signature="self,arg,dsActiveGroup,dsAG">self.noticeCount = 0;
self.onReceiveListeners = [];
self.onChatCloseListeners = [];
self.addReceiveListener = function(l) {
	self.onReceiveListeners.push(l);
};
self.addChatCloseListener = function(l) {
	self.onChatCloseListeners.push(l);
};
self.onReceive = function(socket, arg) {
	self.doReceiveNotice(socket, arg);
	self.onReceiveListeners.each(function(l) {
		l(self, {socket: socket, param: arg});
	});
};

self.connectNotifyServer = function() {
	self._noticeSocket = dorado.Socket.connect({
		service: &quot;noticeController#connectServer&quot;,
		parameter: &quot;${loginUsername}&quot;,
		onReceive: function(arg) {
			self.onReceive(view._notifySocket, arg)
		},
		onDisconnect: function() {

		}
	});
};

self.send = function(notice) {
	self._noticeSocket.send(notice.type, notice);
}

self.connectNotifyServer();

$(window).bind(&quot;beforeunload&quot;, function(){
	if (self._noticeSocket.get(&quot;connected&quot;)) {
		self._noticeSocket.disconnect();
	}
	return;
});

self.doReceiveNotice = function(s, arg) {
	if(arg.type === &quot;message&quot;) {
		var groups = dsActiveGroup.getData();
		var group = null;
		groups.each(function(g) {
			if (g.get(&quot;id&quot;) === arg.data.groupId) {
				group = g;
				return false;
			}
		});
		
		var callback = function() {
			if (!group.noticeCount) {
				group.noticeCount = 0;
			}
			arg.data.$dataType = &quot;Notice&quot;;
			group.set(&quot;lastNotice&quot;, arg.data);
			delete arg.data.$dataType;
			group.createChild(&quot;notices&quot;, arg.data);
			
			if (groups.getFirst() !== group) {
				groups.insert(group, &quot;begin&quot;);
				group.setState(dorado.Entity.STATE_NONE);
			}
			if (arg.data.sender === &quot;${loginUsername}&quot;) {
				return;
			} else {
				self.noticeCount++;
				group.noticeCount++;
			}
			if (groups.refreshCountTask) {
				clearTimeout(group.refreshCountTask);
			}
			group.refreshCountTask = setTimeout(function() {
				var count = group.noticeCount > 99 ? &quot;99+&quot; : group.noticeCount;
				$(&quot;#group-count-&quot; + group.entityId).css(&quot;display&quot;, group.noticeCount ? &quot;inline-block&quot; : &quot;none&quot;).text(count);
				if (group.noticeCount) {
					var count = group.noticeCount > 99 ? &quot;99+&quot; : group.noticeCount;
					$(&quot;#group-count-&quot; + group.entityId).css(&quot;display&quot;, group.noticeCount ? &quot;inline-block&quot; : &quot;none&quot;).text(count);
					if (group.noticeCount > 9) {
						$(&quot;#group-count-&quot; + group.entityId).css(&quot;padding&quot;, &quot;2px 4px&quot;);
					} else {
						$(&quot;#group-count-&quot; + group.entityId).css(&quot;padding&quot;, &quot;2px&quot;);
					}
					
				}
			}, 80);
		};
		if (group) {
			callback();
		} else {
			dsAG.set(&quot;parameter&quot;, {
				groupId: arg.data.groupId,
				memberId: &quot;${loginUsername}&quot;
			}).flushAsync(function(data) {
				group = groups.insert(data.toJSON(), &quot;begin&quot;);
				callback();
			});
		}
		
	} else if (arg.type === &quot;mark-read&quot;) {
		var groups = dsActiveGroup.getData();
		groups.each(function(g) {
			if (g.get(&quot;id&quot;) === arg.data.groupId) {
				self.noticeCount -= g.noticeCount;
				g.noticeCount = 0;
				$(&quot;#group-count-&quot; + g.entityId).css(&quot;display&quot;, &quot;none&quot;);
				return false;
			}
		});
	}
};

</ClientEvent>
      <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,Chat">var group = dsActiveGroup.getData(&quot;#&quot;);
if (group &amp;&amp; group.noticeCount > 0) {
	Chat.send({
		type: &quot;mark-read&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;)
	})

}

</ClientEvent>
      <Property name="modal">false</Property>
      <Property name="width">700</Property>
      <Property name="height">560</Property>
      <Property name="showCaptionBar">false</Property>
      <Property name="exClassName">chat</Property>
      <Property name="collapseable">false</Property>
      <Property name="minimizeable">false</Property>
      <Property name="maximizeable">false</Property>
      <Property name="maximized">false</Property>
      <Property name="floating">true</Property>
      <Property name="animateType">fade</Property>
      <Property name="shadowMode">frame</Property>
      <Buttons/>
      <Children>
        <Container>
          <Container layoutConstraint="top">
            <ClientEvent name="onClick">
</ClientEvent>
            <Property name="height">50</Property>
            <Property name="className">header</Property>
            <Container layout="hbox align:center;pack:center" layoutConstraint="left">
              <Property name="width">180</Property>
              <TextEditor layoutConstraint="left">
                <ClientEvent name="onKeyDown" signature="self,arg,chatOption,activeGroupList,userResult,dsUser">if (arg.keyCode === 13) {
	return;
}
if (self.userQueryTask) {
	window.clearTimeout(self.userQueryTask);
}
self.userQueryTask = window.setTimeout(function() {
	chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});
	var key = self.get(&quot;value&quot;);
	if (key) {
		activeGroupList.set(&quot;visible&quot;, false);
		userResult.set(&quot;visible&quot;, true);
		dsUser.set(&quot;parameter&quot;, {
			usernameOrNickname: key,
			memberId: &quot;${loginUsername}&quot;
		}).flushAsync();
	}
	else {
		activeGroupList.set(&quot;visible&quot;, true);
		userResult.set(&quot;visible&quot;, false);
	}
}, 150);</ClientEvent>
                <Property name="exClassName">search-text</Property>
                <Property name="width">140</Property>
                <Property name="style">
                  <Property name="margin-top">2px</Property>
                </Property>
              </TextEditor>
            </Container>
            <Container layout="hbox pack:center;align:center">
              <ClientEvent name="onReady" signature="self,arg,cardBookChat">self.clickProxy = function(c, index) {
	if (self.current === c) {
		return;
	}
	var current = self.current;
	var temp = current.get(&quot;userData&quot;);
	current.set(&quot;userData&quot;, current.get(&quot;exClassName&quot;));
	current.set(&quot;exClassName&quot;, temp);
	
	temp = c.get(&quot;userData&quot;);
	c.set(&quot;userData&quot;, c.get(&quot;exClassName&quot;));
	c.set(&quot;exClassName&quot;, temp);
	
	self.current = c;
	
	cardBookChat.set(&quot;currentIndex&quot;, index);
}
</ClientEvent>
              <Property name="exClassName">options</Property>
              <Property name="contentOverflow">hidden</Property>
              <Control id="chatOption">
                <ClientEvent name="onReady">self.get(&quot;parent&quot;).current = self;
</ClientEvent>
                <ClientEvent name="onClick">self.get(&quot;parent&quot;).clickProxy(self, 0);
</ClientEvent>
                <Property name="exClassName">fa fa-comment green-text</Property>
                <Property name="userData">fa fa-comment-o</Property>
                <Property name="tags">option</Property>
                <Property name="metaData">
                  <Property name="key"></Property>
                </Property>
              </Control>
              <Control>
                <ClientEvent name="onClick">self.get(&quot;parent&quot;).clickProxy(self, 1);</ClientEvent>
                <Property name="exClassName">fa fa-sun-o</Property>
                <Property name="userData">fa fa-certificate green-text</Property>
                <Property name="tags">option</Property>
              </Control>
              <Control>
                <ClientEvent name="onClick">self.get(&quot;parent&quot;).clickProxy(self, 2);</ClientEvent>
                <Property name="exClassName">fa fa-square-o
</Property>
                <Property name="userData">fa fa-square green-text</Property>
                <Property name="tags">option</Property>
              </Control>
            </Container>
            <Container layout="hbox pack:end;align:center;stretch:true" layoutConstraint="right">
              <Property name="width">180</Property>
              <Property name="exClassName">options</Property>
              <Property name="contentOverflow">hidden</Property>
              <Control>
                <Property name="exClassName">avatar fa fa-globe</Property>
              </Control>
              <Control>
                <ClientEvent name="onClick" signature="self,arg,Chat">Chat.onChatCloseListeners.each(function(l) {
	l();
});
</ClientEvent>
                <Property name="exClassName">fa fa-times-circle</Property>
              </Control>
            </Container>
          </Container>
          <CardBook id="cardBookChat" layoutConstraint="center">
            <Container>
              <DataSet id="dsUnselectedUser">
                <Property name="dataType">[User]</Property>
                <Property name="dataProvider">noticeController#loadUnselectedUsers</Property>
                <Property name="pageSize">10</Property>
                <Property name="loadMode">manual</Property>
              </DataSet>
              <DataSet id="dsPLG">
                <Property name="dataType">ActiveGroup</Property>
                <Property name="dataProvider">groupController#loadPrivateLetterGroup</Property>
              </DataSet>
              <DataSet id="dsAG">
                <Property name="dataType">ActiveGroup</Property>
                <Property name="dataProvider">groupController#loadActiveGroup</Property>
              </DataSet>
              <DataSet id="dsUser">
                <Property name="dataType">[User]</Property>
                <Property name="dataProvider">noticeController#loadUsers</Property>
                <Property name="pageSize">10</Property>
                <Property name="loadMode">manual</Property>
              </DataSet>
              <DataSet id="dsActiveGroup">
                <Property name="dataType">[ActiveGroup]</Property>
                <Property name="dataProvider">groupController#loadActiveGroups</Property>
                <Property name="parameter">${loginUsername}</Property>
              </DataSet>
              <DataSet id="dsGroup">
                <ClientEvent name="onLoadData" signature="self,arg,splitPanelGroupDetails">if (self.getData().entityCount > 0) {
	splitPanelGroupDetails.set(&quot;visible&quot;, true);
}
</ClientEvent>
                <Property name="dataType">[Group]</Property>
                <Property name="dataProvider">groupController#loadGroups</Property>
                <Property name="parameter">${loginUsername}</Property>
              </DataSet>
              <SplitPanel>
                <Property name="position">180</Property>
                <MainControl>
                  <SplitPanel>
                    <Property name="position">150</Property>
                    <Property name="direction">bottom</Property>
                    <MainControl>
                      <Container>
                        <Control id="yourTitle" layoutConstraint="top">
                          <Property name="exClassName">your-title</Property>
                        </Control>
                        <DataListBox>
                          <ClientEvent name="onRenderRow" signature="self,arg,dsActiveGroup">$(arg.dom).empty();
var group = dsActiveGroup.getData(&quot;#&quot;);
var my = arg.data.get(&quot;sender&quot;) === &quot;${loginUsername}&quot;;
var name = &quot;&quot;;
var tip = new dorado.widget.Tip({
	content: arg.data.get(&quot;content&quot;).replace(/\n/g, &quot;&lt;br>&quot;),
	floating: false,
	arrowDirection: (my ? &quot;right&quot; : &quot;left&quot;) + (group.get(&quot;memberCount&quot;) > 2 ? &quot; group&quot; : &quot;&quot;),
	arrowAlign: &quot;top&quot;
});
var avatar = new dorado.widget.Control({
	exClassName: &quot;message-avatar &quot; + (my ? &quot;right&quot; : &quot;left&quot;)
});

if (my) {
	name = &quot;${loginUser.nickname}&quot;;
} else {
	name = arg.data.get(&quot;senderGroupMember.nickname&quot;);
}
$(avatar.getDom()).text(name[0].toLocaleUpperCase());

if (group.get(&quot;memberCount&quot;) > 2) {
	var nickname = new dorado.widget.Control({
		exClassName: &quot;message-nickname &quot; + (my ? &quot;right&quot; : &quot;left&quot;)
	});
	$(nickname.getDom()).text(name);
	nickname.render(arg.dom);
}

avatar.render(arg.dom);
tip.render(arg.dom);
</ClientEvent>
                          <Property name="dataSet">dsActiveGroup</Property>
                          <Property name="dataPath">#.notices</Property>
                          <Property name="property">content</Property>
                          <Property name="highlightCurrentRow">false</Property>
                          <Property name="highlightHoverRow">false</Property>
                          <Property name="className">message-list</Property>
                        </DataListBox>
                      </Container>
                    </MainControl>
                    <SideControl>
                      <Container layout="padding:5">
                        <Container layout="hbox pack:start" layoutConstraint="top">
                          <Property name="height">30</Property>
                          <Control>
                            <Property name="exClassName">message-tool fa fa-smile-o</Property>
                          </Control>
                        </Container>
                        <TextArea>
                          <ClientEvent name="onKeyPress" signature="self,arg,dsActiveGroup,Chat">var content = self.get(&quot;value&quot;);
if (arg.keyCode === 13 &amp;&amp; content &amp;&amp; !arg.shiftKey) {
	var group = dsActiveGroup.getData(&quot;#&quot;);
	if (!group) {
		return;
	} 
	Chat.send({
		type: &quot;message&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;),
		all: group.get(&quot;all&quot;),
		content: content,
		senderGroupMember: {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			nickname: &quot;${loginUser.nickname}&quot;
		}
	});
	self.set(&quot;value&quot;, null);
	arg.returnValue = false;
}</ClientEvent>
                          <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,Chat">var group = dsActiveGroup.getData(&quot;#&quot;);
if (group &amp;&amp; group.noticeCount > 0) {
	Chat.send({
		type: &quot;mark-read&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;)
	})

}

</ClientEvent>
                          <Property name="exClassName">message-text-area</Property>
                        </TextArea>
                      </Container>
                    </SideControl>
                  </SplitPanel>
                </MainControl>
                <SideControl>
                  <Container>
                    <DataListBox id="activeGroupList">
                      <ClientEvent name="onRenderRow">$(arg.dom).empty();
var privateLetter = arg.data.get(&quot;privateLetter&quot;);
var n = &quot;&quot;;
var d = &quot;&quot;;
if (privateLetter) {
	n = arg.data.get(&quot;other&quot;).get(&quot;nickname&quot;);
} else {
	n = arg.data.get(&quot;name&quot;) || &quot;无&quot;;
}
if (arg.data.get(&quot;lastNotice&quot;)) {
	d = arg.data.get(&quot;lastNotice&quot;).get(&quot;content&quot;);
}

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

var count = new dorado.widget.Control({
	exClassName: &quot;group-count&quot;
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
count.render(arg.dom);
description.render(arg.dom);
$(arg.dom).find(&quot;.group-count&quot;).attr(&quot;id&quot;, &quot;group-count-&quot; + arg.data.entityId)
</ClientEvent>
                      <Property name="dataSet">dsActiveGroup</Property>
                      <Property name="property">name</Property>
                      <Property name="hideMode">display</Property>
                      <Property name="highlightHoverRow">false</Property>
                    </DataListBox>
                    <DataListBox id="userResult">
                      <ClientEvent name="onDataRowClick" signature="self,arg,dsUser,dsPLG,activeGroupList,userResult,updateActionActiveGroup,dsActiveGroup">var receiver = dsUser.getData(&quot;#&quot;);
var groups = dsActiveGroup.getData();
var group = null;
groups.each(function(g) {
	if (g.get(&quot;other.memberId&quot;) === receiver.get(&quot;username&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
} else {
	dsPLG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		otherId: receiver.get(&quot;username&quot;)
	}).flushAsync(function(data) {
		if (data) {
			group = groups.insert(data.toJSON(), &quot;begin&quot;);
			group.setState(dorado.Entity.STATE_NONE);
		} else {
			var group = groups.insert({
				privateLetter: true,
				memberCount: 2,
				creator: &quot;${loginUsername}&quot;,
				other: {
					memberId: receiver.get(&quot;username&quot;),
					nickname: receiver.get(&quot;nickname&quot;),
					active: true
				}
			}, &quot;begin&quot;);
			group.createChild(&quot;members&quot;, {
				memberId: &quot;${loginUsername}&quot;,
				nickname: &quot;${loginUser.nickname}&quot;,
				active: true
			});
			group.createChild(&quot;members&quot;, {
				memberId: receiver.get(&quot;username&quot;),
				nickname: receiver.get(&quot;nickname&quot;),
				active: true
			});
			updateActionActiveGroup.execute();
					
		}
	});
}

activeGroupList.set(&quot;visible&quot;, true);
userResult.set(&quot;visible&quot;, false);
</ClientEvent>
                      <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;username&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);</ClientEvent>
                      <Property name="dataSet">dsUser</Property>
                      <Property name="property">nickname</Property>
                      <Property name="visible">false</Property>
                      <Property name="hideMode">display</Property>
                      <Property name="highlightHoverRow">false</Property>
                    </DataListBox>
                  </Container>
                </SideControl>
              </SplitPanel>
              <UpdateAction id="updateActionActiveGroup">
                <Property name="dataResolver">groupController#save</Property>
                <UpdateItem>
                  <Property name="dataSet">dsActiveGroup</Property>
                </UpdateItem>
              </UpdateAction>
              <UpdateAction id="updateActionGroup">
                <Property name="dataResolver">groupController#save</Property>
                <UpdateItem>
                  <Property name="dataSet">dsGroup</Property>
                </UpdateItem>
              </UpdateAction>
              <AjaxAction id="ajaxActionMarkRead"/>
            </Container>
            <Container>
              <SplitPanel>
                <Property name="position">180</Property>
                <MainControl>
                  <Container>
                    <SplitPanel id="splitPanelGroupDetails">
                      <Property name="position">173</Property>
                      <Property name="direction">top</Property>
                      <Property name="visible">false</Property>
                      <MainControl>
                        <Container>
                          <DataListBox>
                            <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;memberId&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar green-background&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
</ClientEvent>
                            <ClientEvent name="onDataRowDoubleClick" signature="self,arg,dsGroup,chatOption,dsPLG,activeGroupList,userResult,updateActionActiveGroup,dsActiveGroup">var member = dsGroup.getData(&quot;#.#members&quot;);
var groups = dsActiveGroup.getData();
var group = null;
groups.each(function(g) {
	if (g.get(&quot;other.memberId&quot;) === member.get(&quot;memberId&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
} else {
	dsPLG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		otherId: member.get(&quot;memberId&quot;)
	}).flushAsync(function(data) {
		if (data) {
			group = groups.insert(data.toJSON(), &quot;begin&quot;);
			group.setState(dorado.Entity.STATE_NONE);
		} else {
			var group = groups.insert({
				privateLetter: true,
				creator: &quot;${loginUsername}&quot;,
				other: {
					memberId: member.get(&quot;memberId&quot;),
					nickname: member.get(&quot;nickname&quot;),
					active: true
				}
			}, &quot;begin&quot;);
			group.createChild(&quot;members&quot;, {
				memberId: &quot;${loginUsername}&quot;,
				nickname: &quot;${loginUser.nickname}&quot;,
				active: true
			});
			group.createChild(&quot;members&quot;, {
				memberId: member.get(&quot;memberId&quot;),
				nickname: member.get(&quot;nickname&quot;),
				active: true
			});
			updateActionActiveGroup.execute();
					
		}
	});
}

activeGroupList.set(&quot;visible&quot;, true);
userResult.set(&quot;visible&quot;, false);
chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});


</ClientEvent>
                            <Property name="dataSet">dsGroup</Property>
                            <Property name="property">name</Property>
                            <Property name="hideMode">display</Property>
                            <Property name="highlightHoverRow">false</Property>
                            <Property name="dataPath">#.members</Property>
                          </DataListBox>
                          <Container id="memberPageContainer" layout="hbox pack:center;align:center;regionPadding:16" layoutConstraint="bottom">
                            <Property name="hideMode">display</Property>
                            <Property name="height">40</Property>
                            <DataPilot>
                              <Property name="itemCodes">&lt;,></Property>
                              <Property name="dataSet">dsGroup</Property>
                              <Property name="dataPath">#.members</Property>
                            </DataPilot>
                          </Container>
                        </Container>
                      </MainControl>
                      <SideControl>
                        <Container>
                          <AutoForm layoutConstraint="left">
                            <Property name="dataSet">dsGroup</Property>
                            <Property name="cols">*,*,*</Property>
                            <Property name="labelAlign">right</Property>
                            <Property name="width">330</Property>
                            <Property name="showHint">false</Property>
                            <AutoFormElement layoutConstraint="colSpan:3">
                              <Property name="name">name</Property>
                              <Property name="property">name</Property>
                              <Property name="editorType">Label</Property>
                              <Editor>
                                <Label>
                                  <ClientEvent name="onRefreshDom" signature="self,arg,splitPanelGroupDetails,dsGroup,groupDeleteBtn,groupSaveBtn">if (!dsGroup.get(&quot;dataLoaded&quot;)) {
	return;
}
if (!dsGroup.getData(&quot;#&quot;)) {
	splitPanelGroupDetails.set(&quot;visible&quot;, false);
	return;
}
splitPanelGroupDetails.set(&quot;visible&quot;, true);
if (!dsGroup.getData(&quot;#.current.administrator&quot;)) {
	self.set(&quot;parent.parent.readOnly&quot;, true);
	groupSaveBtn.set(&quot;visible&quot;, false);
	groupDeleteBtn.set(&quot;visible&quot;, false);
	return;
}
var edit = new dorado.widget.Control({
	exClassName: &quot;edit-control fa fa-pencil-square-o&quot;
});
$(arg.dom).find(&quot;.edit-control&quot;).remove();
edit.render(arg.dom);
self.set(&quot;parent.parent.readOnly&quot;, false);
groupSaveBtn.set(&quot;visible&quot;, true);
groupDeleteBtn.set(&quot;visible&quot;, true);

$(arg.dom).find(&quot;.edit-control&quot;).on(&quot;click&quot;, function() {
	var input = $(&quot;&lt;input class='float-text-editor'>&quot;);
	$(arg.dom).append(input);
	var value = dsGroup.getData(&quot;#&quot;).get(self.get(&quot;property&quot;))
	input.val(value)
	input.focus();
	input.on(&quot;blur&quot;, function() {
		var v = input.val();
		if (v &amp;&amp; v !== value) {
			dsGroup.getData(&quot;#&quot;).set(self.get(&quot;property&quot;), v);
		}
		input.remove();
	})
});


</ClientEvent>
                                </Label>
                              </Editor>
                            </AutoFormElement>
                            <AutoFormElement layoutConstraint="colSpan:3">
                              <Property name="name">creator</Property>
                              <Property name="property">creator</Property>
                              <Property name="editorType">Label</Property>
                              <Editor/>
                            </AutoFormElement>
                            <AutoFormElement layoutConstraint="colSpan:3">
                              <Property name="name">createTime</Property>
                              <Property name="property">createTime</Property>
                              <Property name="editorType">Label</Property>
                              <Editor/>
                            </AutoFormElement>
                            <AutoFormElement layoutConstraint="colSpan:3">
                              <Property name="name">memberCount</Property>
                              <Property name="property">memberCount</Property>
                              <Property name="editorType">Label</Property>
                              <Editor>
                                <Label>
                                  <ClientEvent name="onRefreshDom" signature="self,arg,updateActionGroup,dsGroup,dialogUserSelection">if (!dsGroup.get(&quot;dataLoaded&quot;) || !dsGroup.getData(&quot;#.current.administrator&quot;)) {
	return;
}
var manager = new dorado.widget.Link({
	text: &quot;管理&quot;,
	exClassName: &quot;member-manager green-text&quot;
});

$(arg.dom).find(&quot;.member-manager&quot;).remove();
manager.render(arg.dom);

$(arg.dom).find(&quot;.member-manager&quot;).on(&quot;click&quot;, function() {
	var group = dsGroup.getData(&quot;#&quot;);
	if (group.state === dorado.Entity.STATE_NEW) {
		updateActionGroup.execute(function() {
			dialogUserSelection.show();
		});
	} else {
		dialogUserSelection.show();
	}
	return false;
});
</ClientEvent>
                                </Label>
                              </Editor>
                            </AutoFormElement>
                            <AutoFormElement>
                              <Property name="name">all</Property>
                              <Property name="property">all</Property>
                              <Editor/>
                            </AutoFormElement>
                            <AutoFormElement>
                              <Property name="name">temporary</Property>
                              <Property name="property">temporary</Property>
                              <Editor/>
                            </AutoFormElement>
                            <AutoFormElement>
                              <Property name="name">system</Property>
                              <Property name="property">system</Property>
                              <Editor/>
                            </AutoFormElement>
                          </AutoForm>
                          <Container layout="hbox align:bottom;regionPadding:10;padding:3">
                            <Button id="groupDeleteBtn">
                              <ClientEvent name="onClick" signature="self,arg,dsGroup,updateActionGroup">var group = dsGroup.getData(&quot;#&quot;);
dorado.MessageBox.confirm(&quot;确定要删除“&quot; + group.get(&quot;name&quot;) + &quot;”群组吗？&quot;, function() {
	group.remove();
	updateActionGroup.execute();
});
</ClientEvent>
                              <Property name="caption">删除</Property>
                              <Property name="width">60</Property>
                              <Property name="ui">decline</Property>
                            </Button>
                            <Button id="groupSaveBtn">
                              <Property name="caption">保存</Property>
                              <Property name="width">60</Property>
                              <Property name="action">updateActionGroup</Property>
                            </Button>
                          </Container>
                        </Container>
                      </SideControl>
                    </SplitPanel>
                  </Container>
                </MainControl>
                <SideControl>
                  <Container>
                    <Container layout="vbox pack:center;align:center;stretch:true;padding:12" layoutConstraint="top">
                      <Property name="height">50</Property>
                      <Property name="contentOverflow">hidden</Property>
                      <Button>
                        <ClientEvent name="onClick" signature="self,arg,splitPanelGroupDetails,dsGroup,dialogUserSelection">var current = {
	memberId: &quot;${loginUsername}&quot;,
	nickname: &quot;${loginUser.nickname}&quot;,
	administrator: true
};
var group = dsGroup.insert({
	name: &quot;请输入群组名称&quot;,
	creator: &quot;${loginUsername}&quot;,
	current: current,
	memberCount: 1
});
group.createChild(&quot;members&quot;, current);
splitPanelGroupDetails.set(&quot;visible&quot;, true);
</ClientEvent>
                        <Property name="caption">创建群组</Property>
                        <Property name="style">
                          <Property name="width">100px</Property>
                        </Property>
                      </Button>
                    </Container>
                    <DataListBox id="groupList">
                      <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;name&quot;);
var d = &quot;&quot;;

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
</ClientEvent>
                      <ClientEvent name="onDataRowDoubleClick" signature="self,arg,dsGroup,chatOption,dsAG,activeGroupList,userResult,dsActiveGroup">var current = dsGroup.getData(&quot;#&quot;);
var groups = dsActiveGroup.getData();
var group = null;
groups.each(function(g) {
	if (g.get(&quot;id&quot;) === current.get(&quot;id&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
	chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});
} else {
	dsAG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		groupId: current.get(&quot;id&quot;)
	}).flushAsync(function(data) {
		group = groups.insert(data.toJSON(), &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
		activeGroupList.set(&quot;visible&quot;, true);
		userResult.set(&quot;visible&quot;, false);
		chatOption.fireEvent(&quot;onClick&quot;, chatOption, {});
	});
}

</ClientEvent>
                      <Property name="dataSet">dsGroup</Property>
                      <Property name="property">name</Property>
                      <Property name="hideMode">display</Property>
                      <Property name="highlightHoverRow">false</Property>
                    </DataListBox>
                    <Dialog id="dialogUserSelection">
                      <ClientEvent name="onShow" signature="self,arg,dsGroup,dsUnselectedUser">var group = dsGroup.getData(&quot;#&quot;);
dsUnselectedUser.set(&quot;parameter&quot;, {
	groupId: group.get(&quot;id&quot;),
	memberId: &quot;${loginUsername}&quot;,
}).flushAsync();
</ClientEvent>
                      <Property name="width">700</Property>
                      <Property name="height">560</Property>
                      <Property name="showCaptionBar">false</Property>
                      <Property name="exClassName">chat</Property>
                      <Buttons/>
                      <Children>
                        <SplitPanel>
                          <Property name="position">50%</Property>
                          <MainControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsGroup">if (arg.keyCode === 13) {
	return;
}
if (self.queryTask) {
	window.clearTimeout(self.queryTask);
}
self.queryTask = window.setTimeout(function(){
	var members = dsGroup.getData(&quot;#.members&quot;);
	var key = self.get(&quot;value&quot;);
	if (key) {
		members.parameter = {
			groupId: members.parent.get(&quot;id&quot;),
			memberIdOrNickname: key
		};
	} else {
		members.parameter = {
			groupId: members.parent.get(&quot;id&quot;),
			memberIdOrNickname: null
		};
	}
	members.flushAsync();
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;memberId&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

var remove = new dorado.widget.Control({
	exClassName: &quot;selection-remove fa fa-times-circle&quot;
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
remove.render(arg.dom);

$(arg.dom).find(&quot;.selection-remove&quot;).on(&quot;click&quot;, function() {
	arg.data.parent.parent.set(&quot;memberCount&quot;, arg.data.parent.parent.get(&quot;memberCount&quot;) - 1);
	arg.data.remove();
});
</ClientEvent>
                                <Property name="dataSet">dsGroup</Property>
                                <Property name="property">nickname</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                                <Property name="dataPath">#.members</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:8" layoutConstraint="bottom">
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsGroup</Property>
                                  <Property name="dataPath">#.members</Property>
                                </DataPilot>
                                <Button>
                                  <ClientEvent name="onClick" signature="self,arg,dsGroup,dialogUserSelection">dialogUserSelection.hide();
dsGroup.getData().cancel()
</ClientEvent>
                                  <Property name="caption">关闭</Property>
                                  <Property name="style">
                                    <Property name="width">60</Property>
                                    <Property name="margin-top">3px</Property>
                                  </Property>
                                </Button>
                              </Container>
                            </Container>
                          </MainControl>
                          <SideControl>
                            <Container>
                              <Container layout="hbox align:center;pack:center;padding:10" layoutConstraint="top">
                                <Property name="contentOverflow">hidden</Property>
                                <TextEditor layoutConstraint="left">
                                  <ClientEvent name="onKeyDown" signature="self,arg,dsUnselectedUser,dsGroup">if (arg.keyCode === 13) {
	return;
}
if (self.userQueryTask) {
	window.clearTimeout(self.userQueryTask);
}
self.userQueryTask = window.setTimeout(function(){
	var group = dsGroup.getData(&quot;#&quot;);
	var key = self.get(&quot;value&quot;);
	if (key) {
		dsUnselectedUser.set(&quot;parameter&quot;, {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			usernameOrNickname: key
		}).flushAsync();
	}
	else {
		dsUnselectedUser.set(&quot;parameter&quot;, {
			groupId: group.get(&quot;id&quot;),
			memberId: &quot;${loginUsername}&quot;,
			usernameOrNickname: &quot;&quot;
		}).flushAsync();
	}
}, 150);</ClientEvent>
                                  <Property name="exClassName">search-text</Property>
                                  <Property name="width">200</Property>
                                  <Property name="blankText">搜索</Property>
                                </TextEditor>
                              </Container>
                              <DataListBox>
                                <ClientEvent name="onRenderRow" signature="self,arg,dsGroup,updateActionGroup">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;username&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

var check = new dorado.widget.Control({
	exClassName: &quot;selection-check fa fa-circle-o&quot;
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);

avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);
check.render(arg.dom);

$(arg.dom).find(&quot;.selection-check&quot;).on(&quot;click&quot;, function() {
	if ($(this).hasClass(&quot;fa-circle-o&quot;)) {
		var group = dsGroup.getData(&quot;#&quot;);
		$(this).removeClass(&quot;fa-circle-o&quot;).addClass(&quot;fa-check-circle green-text&quot;);
		group.set(&quot;memberCount&quot;, group.get(&quot;memberCount&quot;) + 1);
		group.createChild(&quot;members&quot;, {
			memberId: arg.data.get(&quot;username&quot;),
			nickname: arg.data.get(&quot;nickname&quot;)
		});
		updateActionGroup.execute()
	}
});
</ClientEvent>
                                <Property name="dataSet">dsUnselectedUser</Property>
                                <Property name="property">nickname</Property>
                                <Property name="visible">true</Property>
                                <Property name="hideMode">display</Property>
                                <Property name="highlightHoverRow">false</Property>
                                <Property name="highlightCurrentRow">false</Property>
                              </DataListBox>
                              <Container layout="hbox pack:center;align:center;regionPadding:16" layoutConstraint="bottom">
                                <Property name="hideMode">display</Property>
                                <Property name="height">40</Property>
                                <DataPilot>
                                  <Property name="itemCodes">&lt;,></Property>
                                  <Property name="dataSet">dsUnselectedUser</Property>
                                </DataPilot>
                              </Container>
                            </Container>
                          </SideControl>
                        </SplitPanel>
                      </Children>
                      <Tools/>
                    </Dialog>
                  </Container>
                </SideControl>
              </SplitPanel>
            </Container>
            <Container/>
          </CardBook>
        </Container>
      </Children>
      <Tools/>
    </Dialog>
  </View>
</ViewConfig>
